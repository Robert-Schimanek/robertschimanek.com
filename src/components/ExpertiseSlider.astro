---
const { expertises, currentSlug } = Astro.props
const filteredExpertises = expertises.filter(
  (expertise: any) => expertise.slug !== currentSlug,
)

interface Props {
  index: number
}

const { index } = Astro.props
---

<div class="expertise-slider-container pl-4 pt-5 pr-4">
  <div class="mt-0">
    <h2 class="slider dark:text-white">
      <a
        href={`/expertise`}
        class="after:absolute after:inset-0 transition-all ease-in-out duration-300 items-center group"
      >
        <span class="flex-grow">Check out my expertise</span>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="transition-transform ease-in-out duration-300 group-hover:translate-x-1 lg:w-8 lg:h-8 w-6 h-6 text-current inline-block"
          width="18"
          height="18"
          fill="none"
          aria-hidden="true"
          viewBox="0 0 36 36"
        >
          <path
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
            d="M7.5 18h21M22.5 24l6-6M22.5 12l6 6"></path>
        </svg>
      </a>
    </h2>
  </div>
  <ul class="collage scroll-slider">
    {
      filteredExpertises.map((expertise: any) => (
        <li class="collage expertise-slide group ">
          <div class="relative">
            <figure class="collage aspect-ratio-container">
              <a href={`/expertise/${expertise.slug}`} class="">
                <picture class="collage aspect-ratio-content">
                  <source
                    type="image/webp"
                    media="(min-width: 1024px)"
                    srcset={`${expertise.data.mainImage}?fm=webp&fit=crop&w=600&h=800 600w, ${expertise.data.mainImage}?fm=webp&fit=crop&w=900&h=1200 900w, ${expertise.data.mainImage}?fm=webp&fit=crop&w=1200&h=1600 1200w`}
                    sizes="40rem"
                  />
                  <source
                    type="image/webp"
                    media="(min-width: 768px)"
                    srcset={`${expertise.data.mainImage}?fm=webp&fit=crop&w=800&h=1066 800w, ${expertise.data.mainImage}?fm=webp&fit=crop&w=1200&h=1600 1200w, ${expertise.data.mainImage}?fm=webp&fit=crop&w=1600&h=2133 1600w`}
                    sizes="50vw"
                  />
                  <source
                    type="image/webp"
                    srcset={`${expertise.data.mainImage}?fm=webp&fit=crop&w=400&h=533 400w, ${expertise.data.mainImage}?fm=webp&fit=crop&w=600&h=800 600w, ${expertise.data.mainImage}?fm=webp&fit=crop&w=800&h=1066 800w`}
                    sizes="100vw"
                  />
                  <img
                    src={`${expertise.data.mainImage}?w=120&h=160&fit=crop`}
                    class="collage w-full h-full object-cover"
                    loading="lazy"
                    fetchpriority={index === 0 ? 'high' : 'low'}
                    width="600"
                    height="800"
                    alt={expertise.data.title}
                  />
                </picture>
              </a>
            </figure>
            <div class="mt-0">
              <h3 class="slider dark:text-white">
                <a
                  href={`/expertise/${expertise.slug}`}
                  class="after:absolute after:inset-0 group transition-all ease-in-out duration-300 flex items-center expertise-link"
                >
                  <span class="flex-grow">{expertise.data.title}</span>
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="transition-transform ease-in-out duration-300 group-hover:translate-x-1 lg:w-12 lg:h-12 w-8 h-8 text-current inline-block "
                    width="18"
                    height="18"
                    fill="none"
                    aria-hidden="true"
                    viewBox="0 0 36 36"
                  >
                    <path
                      stroke="currentColor"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      d="M7.5 18h21M22.5 24l6-6M22.5 12l6 6"
                    />
                  </svg>
                </a>
              </h3>
            </div>
          </div>
        </li>
      ))
    }
  </ul>
</div>

<script>
  document.addEventListener('astro:page-load', () => {
    const slider = document.querySelector('.scroll-slider')
    const slides = document.querySelectorAll('.expertise-slide')

    slides.forEach((slide, index) => {
      const link = slide.querySelector('a')
      const image = slide.querySelector('img')

      const isFullyVisible = () => {
        const rect = slide.getBoundingClientRect()
        return rect.left >= 0 && rect.right <= window.innerWidth
      }

      const handleClick = (e: Event) => {
        if (!isFullyVisible()) {
          e.preventDefault()
          e.stopPropagation()

          const slideRect = slide.getBoundingClientRect()
          if (slider) {
            const sliderRect = slider.getBoundingClientRect()
            const isSmallScreen = window.innerWidth < 640 // Adjust this breakpoint as needed

            if (isSmallScreen) {
              // Touch-like sliding for small screens
              const currentScrollLeft = slider.scrollLeft
              const targetScrollLeft =
                slideRect.left < sliderRect.left
                  ? currentScrollLeft - slideRect.width
                  : currentScrollLeft + slideRect.width

              slider.scrollTo({
                left: targetScrollLeft,
                top: slider.scrollTop, // Maintain vertical scroll position
                behavior: 'smooth',
              })
            } else {
              // Existing behavior for larger screens
              const scrollAmount = slideRect.width * 2
              if (slideRect.left < sliderRect.left) {
                slider.scrollBy({ left: -scrollAmount, behavior: 'smooth' })
              } else {
                slider.scrollBy({ left: scrollAmount, behavior: 'smooth' })
              }
            }
          }
        }
      }

      link?.addEventListener('click', handleClick)
      image?.addEventListener('click', handleClick)
    })
  })
</script>

<style>
  .expertise-slide img {
    content-visibility: auto;
  }

  .expertise-slider-container {
    @apply overflow-hidden;
  }

  .scroll-slider {
    display: flex;
    flex-flow: row nowrap;
    scroll-snap-type: x mandatory;
    flex: none;
    overflow-x: auto;
    gap: 0.75rem;
    padding: 1rem 0;
    margin: 0 -1rem;
    -webkit-overflow-scrolling: touch;
  }

  .expertise-slide {
    scroll-snap-align: start;
    flex: 0 0 80%;
    max-width: 80%;
  }

  .aspect-ratio-container {
    position: relative;
    width: 100%;
    padding-top: 133.33%; /* 3:4 Aspect Ratio */
    overflow: hidden;
  }

  .aspect-ratio-content {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  @media (min-width: 768px) {
    .expertise-slide {
      flex: 0 0 40%;
      max-width: 40%;
    }
  }

  @media (min-width: 1024px) {
    .expertise-slide {
      flex: 0 0 30%;
      max-width: 30%;
    }
  }

  .scroll-slider::-webkit-scrollbar {
    display: none;
  }

  .scroll-slider {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }

  .expertise-link {
    position: relative;
    overflow: hidden;
  }

  .expertise-link::after {
    content: none;
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 2px;
    background-color: #ff4438; /* Adjust this to match your brand's red color */
    transform: scaleX(0);
    transform-origin: right;
    transition: transform 0.3s ease;
  }

  .group:hover .expertise-link::after {
    transform: scaleX(1);
    transform-origin: left;
  }

  .group:hover .expertise-link {
    color: #ff4438; /* Adjust this to match your brand's red color */
  }
</style>

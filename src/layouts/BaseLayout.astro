---
import { fade } from 'astro:transitions'
import { ViewTransitions } from 'astro:transitions'
import BaseHead from '@/components/BaseHead.astro'
import Header from '@/components/Header.vue'
import Footer from '@/components/Footer.vue'
import ScrollToTop from '@/components/ScrollToTop.vue'
import MagneticBackground from '@/components/MagneticBackground.astro'

const { ...head } = Astro.props
const pageTitle = Astro.props.title
const isBlogPost = Astro.props.isBlogPost || false
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead {...head} />
    <ViewTransitions />
    <script>
      // This script will run as soon as it's encountered
      ;(function () {
        function applyTheme() {
          const theme = localStorage.getItem('theme')
          document.documentElement.classList.toggle('dark', theme === 'dark')
          document.documentElement.style.setProperty(
            '--background-color',
            theme === 'dark' ? '#121212' : '#ff8800',
          )
        }

        // Apply theme immediately
        applyTheme()

        // Re-apply theme after View Transitions
        document.addEventListener('astro:after-swap', applyTheme)
      })()
    </script>
    <script>
      import { fetchOrcidPublications } from '@/utils/orchidRecords'

      document.addEventListener('astro:page-load', async () => {
        const CACHE_DURATION = 24 * 60 * 60 * 1000 // 24 hours in milliseconds
        const cachedData = localStorage.getItem('orcidPublications')
        const cachedTimestamp = localStorage.getItem(
          'orcidPublicationsTimestamp',
        )

        if (cachedData && cachedTimestamp) {
          const now = Date.now()
          if (now - parseInt(cachedTimestamp) < CACHE_DURATION) {
            // Use cached data if it's less than 24 hours old
            return
          }
        }

        // Fetch new data if cache is empty or outdated
        const newData = await fetchOrcidPublications()
        localStorage.setItem('orcidPublications', JSON.stringify(newData))
        localStorage.setItem(
          'orcidPublicationsTimestamp',
          Date.now().toString(),
        )
      })
    </script>
    <script>
      document.addEventListener('click', async (event) => {
        const target = event.target as Element
        const iconClass = Array.from(target.classList).find((cls) =>
          cls.startsWith('i-'),
        )
        if (iconClass) {
          const { iconYouTubeLinks } = await import('@/utils/iconMap')
          const youtubeLink = iconYouTubeLinks.get(iconClass)
          if (youtubeLink) {
            event.preventDefault()
            window.open(youtubeLink, '_blank')
          }
        }
      })
    </script>
    <script define:vars={{ isBlogPost }}>
      document.addEventListener('astro:page-load', () => {
        if (isBlogPost) {
          const copyButtonLabel = 'Copy'
          const codeBlocks = Array.from(document.querySelectorAll('pre'))

          for (const codeBlock of codeBlocks) {
            const wrapper = document.createElement('div')
            wrapper.style.position = 'relative'

            const copyButton = document.createElement('button')
            copyButton.className = 'copy-code'
            copyButton.innerHTML = copyButtonLabel

            codeBlock.setAttribute('tabindex', '0')
            codeBlock.appendChild(copyButton)
            codeBlock.parentNode.insertBefore(wrapper, codeBlock)
            wrapper.appendChild(codeBlock)

            copyButton.addEventListener('click', async () => {
              await copyCode(codeBlock, copyButton)
            })
          }

          async function copyCode(block, button) {
            const code = block.querySelector('code')
            const text = code.innerText

            await navigator.clipboard.writeText(text)

            button.innerText = 'Copied!'

            setTimeout(() => {
              button.innerText = copyButtonLabel
            }, 700)
          }
        }
      })
    </script>
  </head>
  <body class="text-main min-h-screen font-sans w-full bg-main">
    <MagneticBackground transition:persist />
    <div id="content" class="relative z-10">
      <Header client:load pageTitle={pageTitle} />
      <main
        class="grow max-w-3xl mx-auto sm:pt-32 pt-24 pb-16 small-margin relative"
        transition:animate={fade({ duration: '0.18s' })}
      >
        <slot />
      </main>
      <Footer client:load />
      <ScrollToTop client:load />
    </div>
    <script></script>
  </body>
</html>
